<?xml version="1.0" encoding="utf-8" ?>
<!--
// Copyright (c) Justin Rockwood. All Rights Reserved. Licensed under the Apache License, Version 2.0. See
// LICENSE.txt in the project root for license information.
-->

<!-- See https://sharpgentools.readthedocs.io/en/latest/getting-started.html for documentation on this file. -->
<config id="mediafoundation" xmlns="urn:SharpGen.Config">
  <namespace>SharpMediaFoundation</namespace>
  <assembly>SharpMediaFoundation</assembly>
  <depends>Vortice.Runtime.COM</depends>

  <sdk name="WindowsSdk" version="10.0.19041.0" />
  <sdk name="StdLib" />

  <include file="mfapi.h">
    <attach>IMFAsyncCallback</attach>
    <attach>MF_VERSION</attach>
    <attach>MFAllocateWorkQueue</attach>
    <attach>MFCreateAsyncResult</attach>
    <attach>MFPutWorkItem</attach>
    <attach>MFShutdown</attach>
    <attach>MFStartup</attach>

    <!-- Event GUIDs -->
    <attach>MF_EVENT_DO_THINNING</attach>
    <attach>MF_EVENT_MFT_CONTEXT</attach>
    <attach>MF_EVENT_MFT_INPUT_STREAM_ID</attach>
    <attach>MF_EVENT_OUTPUT_NODE</attach>
    <attach>MF_EVENT_PRESENTATION_TIME_OFFSET</attach>
    <attach>MF_EVENT_SCRUBSAMPLE_TIME</attach>
    <attach>MF_EVENT_SESSIONCAPS</attach>
    <attach>MF_EVENT_SESSIONCAPS_DELTA</attach>
    <attach>MF_EVENT_SOURCE_ACTUAL_START</attach>
    <attach>MF_EVENT_SOURCE_CHARACTERISTICS</attach>
    <attach>MF_EVENT_SOURCE_CHARACTERISTICS_OLD</attach>
    <attach>MF_EVENT_SOURCE_FAKE_START</attach>
    <attach>MF_EVENT_SOURCE_PROJECTSTART</attach>
    <attach>MF_EVENT_SOURCE_TOPOLOGY_CANCELED</attach>
    <attach>MF_EVENT_START_PRESENTATION_TIME</attach>
    <attach>MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT</attach>
    <attach>MF_EVENT_TOPOLOGY_STATUS</attach>
    <attach>MF_TOPOSTATUS</attach>
  </include>

  <include file="mfidl.h">
    <attach>IMFAudioStreamVolume</attach>
    <attach>IMFClock</attach>
    <attach>IMFClockStateSink</attach>
    <attach>IMFGetService</attach>
    <attach>IMFMediaSession</attach>
    <attach>IMFPresentationClock</attach>
    <attach>IMFPresentationTimeSource</attach>
    <attach>IMFSourceResolver</attach>
    <attach>IMFTopology</attach>
    <attach>IMFTopologyNode</attach>
    <attach>MFCLOCK_PROPERTIES</attach>
    <attach>MFCLOCK_STATE</attach>
    <attach>MFCreateMediaSession</attach>
    <attach>MFCreateMFByteStreamOnStream</attach>
    <attach>MFCreateMFByteStreamOnStreamEx</attach>
    <attach>MFCreateSourceResolver</attach>
    <attach>MFGetService</attach>
    <attach>MF_OBJECT_TYPE</attach>
    <!-- The following is the MF_RESOLUTION_* enum -->
    <attach>__MIDL___MIDL_itf_mfidl_0000_0001_0001</attach>
    <attach>MFSESSION_SETTOPOLOGY_FLAGS</attach>
    <attach>MF_TOPOLOGY_TYPE</attach>

    <!-- Media Service GUIDs -->
    <attach>MF_METADATA_PROVIDER_SERVICE</attach>
    <attach>MF_PMP_SERVER_CONTEXT</attach>
    <attach>MF_QUALITY_SERVICES</attach>
    <attach>MF_RATE_CONTROL_SERVICE</attach>
    <attach>MF_REMOTE_PROXY</attach>
    <attach>MF_SAMI_SERVICE</attach>
    <attach>MF_SOURCE_PRESENTATION_PROVIDER_SERVICE</attach>
    <attach>MF_TIMECODE_SERVICE</attach>
    <attach>MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE</attach>
    <attach>MF_WRAPPED_OBJECT</attach>
    <attach>MF_WORKQUEUE_SERVICES</attach>
    <attach>MFNET_SAVEJOB_SERVICE</attach>
    <attach>MFNETSOURCE_STATISTICS_SERVICE</attach>
    <attach>MR_AUDIO_POLICY_SERVICE</attach>
    <attach>MR_BUFFER_SERVICE</attach>
    <attach>MR_CAPTURE_POLICY_VOLUME_SERVICE</attach>
    <attach>MR_POLICY_VOLUME_SERVICE</attach>
    <attach>MR_STREAM_VOLUME_SERVICE</attach>
    <attach>MR_VIDEO_ACCELERATION_SERVICE</attach>
  </include>

  <include file="mferror.h" attach="true" />

  <include file="mfobjects.h">
    <attach>IMFAsyncCallback</attach>
    <attach>IMFAsyncResult</attach>
    <attach>IMFAttributes</attach>
    <attach>IMFByteStream</attach>
    <attach>IMFCollection</attach>
    <attach>IMFMediaEvent</attach>
    <attach>IMFMediaEventGenerator</attach>
    <attach>IMFMediaType</attach>
    <!--The following really should be MediaEventType-->
    <attach>__MIDL___MIDL_itf_mfobjects_0000_0012_0001</attach>
    <attach>MF_ATTRIBUTE_TYPE</attach>
    <attach>MF_ATTRIBUTES_MATCH_TYPE</attach>
    <attach>MFASYNC_.*_CALLBACK</attach>
    <attach>MFASYNC_CALLBACK_QUEUE</attach>
    <attach>MFBYTESTREAM_SEEK_FLAG_CANCEL_PENDING_IO</attach>
    <attach>MFBYTESTREAM_SEEK_ORIGIN</attach>
  </include>

  <context-set id="mediafoundation-all">
    <context>mediafoundation</context>
    <context>mediafoundation-ext</context>
    <context>mfapi</context>
    <context>mfidl</context>
    <context>mfobjects</context>
    <context>mferror</context>
  </context-set>

  <extension>
    <context id="mediafoundation-all" />

    <!--
    // *****************************************************************
    // MediaFoundation Attributes
    // *****************************************************************
    -->

    <!-- Async Callback Enums-->
    <create-cpp enum="MFASYNC_CALLBACK_FLAGS" macro="MFASYNC_.*_CALLBACK" />
    <create-cpp enum="MFASYNC_CALLBACK_QUEUE" macro="MFASYNC_CALLBACK_QUEUE_.*" />

    <!-- ByteStreamSeekFlags -->
    <create-cpp enum="MFBYTESTREAM_SEEK_FLAGS" macro="MFBYTESTREAM_SEEK_FLAG_.*" />

    <!-- EventAttributeKeys -->
    <create visibility="public static" class="EventAttributeKeys" />
    <const from-guid="MF_EVENT_DO_THINNING" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DoThinning">new MediaAttributeKey&lt;bool&gt;("$1", "DoThinning")</const>
    <const from-guid="MF_EVENT_MFT_CONTEXT" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="TransformContext">new MediaAttributeKey&lt;long&gt;("$1", "TransformContext")</const>
    <const from-guid="MF_EVENT_MFT_INPUT_STREAM_ID" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TransformInputStreamId">new MediaAttributeKey&lt;int&gt;("$1", "TransformInputStreamId")</const>
    <const from-guid="MF_EVENT_OUTPUT_NODE" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="OutputNode">new MediaAttributeKey&lt;long&gt;("$1", "OutputNode")</const>
    <const from-guid="MF_EVENT_PRESENTATION_TIME_OFFSET" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="PresentationTimeOffset">new MediaAttributeKey&lt;long&gt;("$1", "PresentationTimeOffset")</const>
    <const from-guid="MF_EVENT_SCRUBSAMPLE_TIME" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="ScrubSampleTime">new MediaAttributeKey&lt;long&gt;("$1", "ScrubSampleTime")</const>
    <const from-guid="MF_EVENT_SESSIONCAPS" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SessionCaps">new MediaAttributeKey&lt;int&gt;("$1", "SessionCaps")</const>
    <const from-guid="MF_EVENT_SESSIONCAPS_DELTA" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SessionCapsDelta">new MediaAttributeKey&lt;int&gt;("$1", "SessionCapsDelta")</const>
    <const from-guid="MF_EVENT_SOURCE_ACTUAL_START" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="SourceActualStart">new MediaAttributeKey&lt;long&gt;("$1", "SourceActualStart")</const>
    <const from-guid="MF_EVENT_SOURCE_CHARACTERISTICS" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceCharacteristics">new MediaAttributeKey&lt;int&gt;("$1", "SourceCharacteristics")</const>
    <const from-guid="MF_EVENT_SOURCE_CHARACTERISTICS_OLD" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceCharacteristicsOld">new MediaAttributeKey&lt;int&gt;("$1", "SourceCharacteristicsOld")</const>
    <const from-guid="MF_EVENT_SOURCE_FAKE_START" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceFakeStart">new MediaAttributeKey&lt;int&gt;("$1", "SourceFakeStart")</const>
    <const from-guid="MF_EVENT_SOURCE_PROJECTSTART" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="SourceProjectStart">new MediaAttributeKey&lt;long&gt;("$1", "SourceProjectStart")</const>
    <const from-guid="MF_EVENT_SOURCE_TOPOLOGY_CANCELED" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceTopologyCanceled">new MediaAttributeKey&lt;int&gt;("$1", "SourceTopologyCanceled")</const>
    <const from-guid="MF_EVENT_START_PRESENTATION_TIME" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="StartPresentationTime">new MediaAttributeKey&lt;long&gt;("$1", "StartPresentationTime")</const>
    <const from-guid="MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="StartPresentationTimeAtOutput">new MediaAttributeKey&lt;long&gt;("$1", "StartPresentationTimeAtOutput")</const>
    <const from-guid="MF_EVENT_TOPOLOGY_STATUS" class="SharpMediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;SharpMediaFoundation.TopologyStatus&gt;" name="TopologyStatus">new MediaAttributeKey&lt;SharpMediaFoundation.TopologyStatus&gt;("$1", "TopologyStatus")</const>

    <!-- MediaServiceKeys -->
    <create visibility="public static" class="MediaServiceKeys" />
    <const from-guid="MF_METADATA_PROVIDER_SERVICE" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="MetadataProvider">new System.Guid("$1")</const>
    <const from-guid="MF_PMP_SERVER_CONTEXT" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="PmpServer">new System.Guid("$1")</const>
    <const from-guid="MF_QUALITY_SERVICES" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="Quality">new System.Guid("$1")</const>
    <const from-guid="MF_RATE_CONTROL_SERVICE" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="RateControl">new System.Guid("$1")</const>
    <const from-guid="MF_REMOTE_PROXY" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="RemoteProxy">new System.Guid("$1")</const>
    <const from-guid="MF_SAMI_SERVICE" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="Sami">new System.Guid("$1")</const>
    <const from-guid="MF_SOURCE_PRESENTATION_PROVIDER_SERVICE" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="SourcePresentationProvider">new System.Guid("$1")</const>
    <const from-guid="MF_TIMECODE_SERVICE" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="TimeCode">new System.Guid("$1")</const>
    <const from-guid="MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="TopologyNodeAttributeEditor">new System.Guid("$1")</const>
    <const from-guid="MF_WRAPPED_OBJECT" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="WrappedObject">new System.Guid("$1")</const>
    <const from-guid="MF_WORKQUEUE_SERVICES" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="WorkQueue">new System.Guid("$1")</const>
    <const from-guid="MFNET_SAVEJOB_SERVICE" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="SaveJob">new System.Guid("$1")</const>
    <const from-guid="MFNETSOURCE_STATISTICS_SERVICE" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="NetworkSourceStatistics">new System.Guid("$1")</const>
    <const from-guid="MR_AUDIO_POLICY_SERVICE" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="AudioPolicy">new System.Guid("$1")</const>
    <const from-guid="MR_BUFFER_SERVICE" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="Buffer">new System.Guid("$1")</const>
    <const from-guid="MR_CAPTURE_POLICY_VOLUME_SERVICE" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="CapturePolicyVolume">new System.Guid("$1")</const>
    <const from-guid="MR_POLICY_VOLUME_SERVICE" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="PolicyVolume">new System.Guid("$1")</const>
    <const from-guid="MR_STREAM_VOLUME_SERVICE" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="StreamVolume">new System.Guid("$1")</const>
    <const from-guid="MR_VIDEO_ACCELERATION_SERVICE" class='SharpMediaFoundation.MediaServiceKeys' type='System.Guid' name="VideoAcceleration">new System.Guid("$1")</const>

    <!-- MediaFactory -->
    <create class="SharpMediaFoundation.MediaFactory" visibility="public static" />
    <const from-macro="MF_VERSION" class="SharpMediaFoundation.MediaFactory" type="int" name="Version" />

    <!-- ResultCode -->
    <create class="ResultCode" visibility="public" />
    <const from-macro="MF_E_(.*)" type="SharpGen.Runtime.ResultDescriptor" cpp-type="int" name="$1" class="SharpMediaFoundation.ResultCode" visibility="public static readonly">new SharpGen.Runtime.ResultDescriptor($1, "$3", "$0", "$2")</const>

    <define enum="SharpMediaFoundation.MediaEventTypes" sizeof="4" />
    <context-clear />
  </extension>

  <bindings>
    <bind from="MEDIA_EVENT_TYPE" to="SharpMediaFoundation.MediaEventTypes" />
    <bind from="UINT16" to="System.Int16" />
    <bind from="UINT32" to="System.Int32" />
    <bind from="UINT64" to="System.Int64" />
  </bindings>

  <!--
  // *****************************************************************
  // Naming Hints
  // *****************************************************************
  -->
  <naming>
    <short name="ACCESSDENIED">AccessDenied</short>
    <short name="ALREADYSTOPPED">AlreadyStopped</short>
    <short name="ATTRIBUTENOTFOUND">AttributeNotFound</short>
    <short name="APPSERVICE">AppService</short>
    <short name="BITPUMP">BitPump</short>
    <short name="BUFFERTOOSMALL">BufferTooSmall</short>
    <short name="BWLEVEL">BwLevel</short>
    <short name="BYTESTREAM">ByteStream</short>
    <short name="CACHESTREAM">CacheStream</short>
    <short name="CANNOTCONNECT">CannotConnect</short>
    <short name="CONTAINERTYPE">ContainerType</short>
    <short name="EDGEMODE">EdgeMode</short>
    <short name="EXATTRIBUTE">ExAttribute</short>
    <short name="EXTENDEDPROP">ExtendedProp</short>
    <short name="INDEXNOTLOADED">IndexNotLoaded</short>
    <short name="INVALIDINDEX">InvalidIndex</short>
    <short name="INVALIDMEDIATYPE">InvalidMediaType</short>
    <short name="INVALIDNAME">InvalidName</short>
    <short name="INVALIDREQUEST">InvalidRequest</short>
    <short name="INVALIDSTATE">InvalidState</short>
    <short name="INVALIDSTREAMNUMBER">InvalidStreamNumber</short>
    <short name="INVALIDTYPE">InvalidType</short>
    <short name="KEYFRAME">KeyFrame</short>
    <short name="MANUALSS">ManualSs</short>
    <short name="MEDIAPROC">MediaProc</short>
    <short name="MEDIASOURCE">MediaSource</short>
    <short name="MEDIATYPE">MediaType</short>
    <short name="MGR">Manager</short>
    <short name="NORESOLUTION">NoResolution</short>
    <short name="NOTACCEPTING">NotAccepting</short>
    <short name="NOTMP3">NotMp3</short>
    <short name="NOTSUPPORTED">NotSupported</short>
    <short name="OUTOFBOUNDS">OutOfBounds</short>
    <short name="OUTOFDATA">OutOfData</short>
    <short name="OUTOFDATE">OutOfDate</short>
    <short name="OUTOFMEMORY">OutOfMemory</short>
    <short name="OUTOFRANGE">OutOfRange</short>
    <short name="PAUSEWHILESTOPPED">PauseWhileStopped</short>
    <short name="PEAUTH">PeAuth</short>
    <short name="PUSHSERVER">PushServer</short>
    <short name="QUALITYKNOB">QualityKnob</short>
    <short name="SAFEMODE">SafeMode</short>
    <short name="SAMPLEALLOCATOR">SampleAllocator</short>
    <short name="SOURCERESOLVER">SourceResolver</short>
    <short name="SOURCESTREAM">SourceStream</short>
    <short name="SPKR">Speaker</short>
    <short name="STREAMGROUPS">StreamGroups</short>
    <short name="STREAMID">StreamId</short>
    <short name="STREAMNUMBER">StreamNumber</short>
    <short name="STREAMSINK">StreamSink</short>
    <short name="STREAMSINKS">StreamSinks</short>
    <short name="TIMELINECONTROLLER">TimelineController</short>
    <short name="USERMODE">UserMode</short>
    <short name="WMDRM">WindowsMediaDrm</short>
    <short name="WMDRMOTA">WindowsMediaDrmOutputTrustAuthority</short>
    <short name="WORKQUEUE">WorkQueue</short>
    <short name="WOULDBLOCK">WouldBlock</short>
    <short name="WRONGSTATE">WrongState</short>
  </naming>

  <mapping>
    <context id="mediafoundation-all" />

    <!--
    // *****************************************************************
    // MediaFoundation Enumerations
    // *****************************************************************
    -->
    <map enum="MF(.*)" name-tmp="$1" />

    <!-- AsyncCallbackFlags -->
    <map enum="MFASYNC_CALLBACK_FLAGS" name="AsyncCallbackFlags" none="true" flags="true" />
    <map enum-item="MFASYNC_(.*)_CALLBACK" name-tmp="$1" />
    <remove enum-item="MFASYNC_CALLBACK_QUEUE_PRIVATE_MASK" />

    <!-- ByteStreamSeekFlags -->
    <map enum="MFBYTESTREAM_SEEK_FLAGS" name="ByteStreamSeekFlags" flags="true" />

    <!-- ByteStreamSeekOrigin -->
    <map enum-item="mso(.*)" name-tmp="$1" />

    <!-- MediaEventTypes -->
    <map enum="#MEUnknown" name="MediaEventTypes" />
    <map enum-item="ME(.*)" name-tmp="$1" />
    <map enum-item="MEWMDRM(.*)" name-tmp="WindowsMediaDrm$1" />
    <remove enum-item="MEReservedMax" />

    <!-- SessionSetTopologyFlags -->
    <map enum="MFSESSION_SETTOPOLOGY_FLAGS" name="SessionSetTopologyFlags" />

    <!-- SourceResolverFlags -->
    <map enum="#MF_RESOLUTION_MEDIASOURCE" name="SourceResolverFlags" none="true" flags="true" />
    <map enum-item="MF_RESOLUTION_(.*)" name-tmp="$1" />

    <!-- TopologyStatus -->
    <map enum="MF_TOPOSTATUS" name="TopologyStatus" />

    <!-- WorkQueueType -->
    <map enum="MFASYNC_CALLBACK_QUEUE" name="WorkQueueType" />
    <map enum-item="MFASYNC_CALLBACK_QUEUE_(.*)" name-tmp="$1" />

    <!--
    // *****************************************************************
    // MediaFoundation Structures
    // *****************************************************************
    -->
    <map struct="MF(.*)" name-tmp="$1" />
    <map field="MFCLOCK_PROPERTIES::dw(.*)" name-tmp="$1" />
    <map field="MFCLOCK_PROPERTIES::guid(.*)" name-tmp="$1" />
    <map field="MFCLOCK_PROPERTIES::qw(.*)" name-tmp="$1" />

    <!--
    // *****************************************************************
    // MediaFoundation Interfaces
    // *****************************************************************
    -->
    <map interface="IMF(.*)" name="$1" />
    <map method=".*GetType" name="GetTypeInfo" />

    <map param=".*::.*::dw(.*)" name-tmp="$1" />
    <map param=".*::.*::pdw(.*)" name-tmp="x$1" />
    <map param=".*::.*::f(.*)" name-tmp="$1" />
    <map param=".*::.*::pf(.*)" name-tmp="f$1" />

    <!-- IMFAsyncCallback -->
    <map interface="IMFAsyncCallback" name="IAsyncCallback" callback="true" />
    <map param="IMFAsyncCallback::GetParameters::pdwFlags" type="MFASYNC_CALLBACK_FLAGS" />

    <!-- IMFAsyncResult -->
    <map method="IMFAsyncResult::.*" property="false" visibility="internal" />
    <map method="IMFAsyncResult::GetStatus" return="true" check="false" />
    <map param="IMFAsyncResult::GetState::ppunkState" type="void" />
    <map method="IMFAsyncResult::GetObjectW" name="GetObject" />

    <!-- IMFAttributes -->
    <map interface="IMFAttributes" name="MediaAttributes" />

    <map method="IMFAttributes::GetItem" visibility="internal" />
    <map param="IMFAttributes::GetItem::pValue" attribute="in" type="void" />
    <map param="IMFAttributes::GetItemType::pType" return="true" />

    <map method="IMFAttributes::CompareItem" visibility="internal" />
    <map param="IMFAttributes::CompareItem::pbResult" return="true" />
    <map param="IMFAttributes::Compare::pbResult" return="true" />

    <map method="IMFAttributes::GetUINT32" visibility="internal" />
    <map method="IMFAttributes::GetUINT32" name="GetInt" />
    <map param="IMFAttributes::GetUINT32::punValue" return="true" />

    <map method="IMFAttributes::GetUINT64" visibility="internal" />
    <map method="IMFAttributes::GetUINT64" name="GetLong" />
    <map param="IMFAttributes::GetUINT64::punValue" return="true" />

    <map method="IMFAttributes::GetDouble" visibility="internal" />
    <map param="IMFAttributes::GetDouble::pfValue" return="true" />

    <map method="IMFAttributes::GetGUID" visibility="internal" />
    <map param="IMFAttributes::GetGUID::pguidValue" return="true" />

    <map method="IMFAttributes::GetString.*" visibility="internal" />
    <map method="IMFAttributes::GetAllocatedString" visibility="internal" />
    <map param="IMFAttributes::GetStringLength::pcchLength" return="true" />
    <map method="IMFAttributes::GetBlob.*" visibility="internal" />
    <map method="IMFAttributes::GetAllocatedBlob" visibility="internal" />
    <map param="IMFAttributes::GetBlob::pBuf" type="void" attribute="in" />
    <map param="IMFAttributes::GetBlobSize::pcbBlobSize" return="true" />
    <map method="IMFAttributes::SetBlob"    visibility="internal" />
    <map param="IMFAttributes::SetBlob::pBuf" type="void" attribute="in" />
    <map method="IMFAttributes::GetUnknown" visibility="internal" />

    <map method="IMFAttributes::SetItem"    name="Set" visibility="internal" />
    <map method="IMFAttributes::SetUINT32"  name="Set" visibility="internal" />
    <map method="IMFAttributes::SetUINT64"  name="Set" visibility="internal" />
    <map method="IMFAttributes::SetDouble"  name="Set" visibility="internal" />
    <map method="IMFAttributes::SetGUID"    name="Set" visibility="internal" />
    <map method="IMFAttributes::SetString"  name="Set" visibility="internal" />
    <map method="IMFAttributes::SetUnknown" name="Set" visibility="internal" />
    <map method="IMFAttributes::GetItemByIndex" visibility="internal" />

    <!-- IMFByteStream -->
    <map interface="IMFByteStream" name="IByteStream" callback-visibility="public" callback="true" callback-dual="true" callback-name="ByteStream" />
    <map param="IMFByteStream::*.*::pb" type="void" attribute="in" />
    <map param="IMFByteStream::Begin[RW].*::punkState" type="void" />
    <map param="IMFByteStream::Seek::dwSeekFlags" type="MFBYTESTREAM_SEEK_FLAGS" />

    <!-- IMFCollection -->
    <map param="IMFCollection::GetElement::ppUnkElement" return="true" />

    <!-- IMFClockStateSink -->
    <map interface="IMFClockStateSink" callback="true" />

    <!-- IMFGetService -->
    <map interface="IMFGetService" name="ServiceProvider" />
    <map param="IMFGetService::GetService::ppvObject" return="true" />

    <!-- IMFMediaEvent -->
    <map param="IMFMediaEvent::GetType::pmet" type="MEDIA_EVENT_TYPE" />

    <!-- IMFMediaEventGenerator -->
    <map method="IMFMediaEventGenerator::GetEvent" name="GetEvent" visibility="internal" />
    <map param="IMFMediaEventGenerator::EndGetEvent::ppEvent" return="true" />
    <map param="IMFMediaEventGenerator::BeginGetEvent::punkState" type="void" />

    <!-- IMFMediaSession -->
    <map param="IMFMediaSession::SetTopology::dwSetTopologyFlags" type="MFSESSION_SETTOPOLOGY_FLAGS" />

    <!-- IMFSourceResolver -->
    <map method="IMFSourceResolver::CreateObjectFromURL" visibility="internal" />

    <!--
    // *****************************************************************
    // MediaFoundation Functions
    // *****************************************************************
    -->
    <map function="MF(.*)" name-tmp="$1" />
    <map function="MF.*" dll='"Mfplat.dll"' group="SharpMediaFoundation.MediaFactory" />

    <!-- MFCreateMediaSession -->
    <map function="MFCreateMediaSession" dll='"mf.dll"' />

    <!-- MFCreateMFByteStreamOnStream -->
    <map param="MFCreateMFByteStreamOnStream::ppByteStream" attribute="out fast" />
    <map param="MFCreateMFByteStreamOnStreamEx::ppByteStream" attribute="out fast" />

    <!-- MFCreateSourceResolver -->
    <map function="MFCreateSourceResolver" dll='"Mfplat.dll"' visibility="internal" />
    <map param="MFCreateSourceResolver::ppISourceResolver" attribute="out fast" />

    <!-- MFGetService -->
    <map function="MFGetService" dll='"mf.dll"' />
    <map param="MFGetService::ppvObject" return="true" />

    <context-clear />
  </mapping>
</config>
